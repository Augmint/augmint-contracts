{
  "contractName": "MonetarySupervisor",
  "abiHash": "066c2220b91befd25691fefd91684117",
  "networks": {
    "4": {
      "latest": {
        "address": "0x02a3b0f6ab5998a0c5d756ed01ea2200ea68d763",
        "generatedAt": "2018-04-23T20:18:33.173Z",
        "compiler": {
          "name": "solc",
          "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
        },
        "byteCodeHash": "aaa00593c08a52c6bbce73d97d28e20a",
        "sourceHash": "3d16faed337b9adec2d66024be645249",
        "source": "/* MonetarySupervisor\n    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\n    - holds system wide parameters/limits\n    - enforces system wide limits\n    - burns and issues to AugmintReserves\n    - Send funds from reserve to exchange when intervening (not implemented yet)\n\n    TODO:\n        - MonetarySupervisorInterface (and use it everywhere)\n        - interestEarnedAccount setter?\n        - create and use InterestEarnedAccount interface instead?\n\n*/\n\npragma solidity 0.4.19;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./AugmintReserves.sol\";\n\n\ncontract MonetarySupervisor is Restricted { // solhint-disable-line no-empty-blocks\n    using SafeMath for uint256;\n\n    AugmintTokenInterface public augmintToken;\n    InterestEarnedAccount public interestEarnedAccount;\n    AugmintReserves public augmintReserves;\n\n    uint public issuedByMonetaryBoard; // supply issued manually by monetary board\n\n    uint public totalLoanAmount; // total amount of all loans without interest, in token\n    uint public totalLockedAmount; // total amount of all locks without premium, in token\n\n    /* Parameters Used to ensure totalLoanAmount or totalLockedAmount difference is withing limit and system also works\n        when any of those 0 or low. */\n    uint public ltdDifferenceLimit;     /* allow lock or loan if Loan To Deposut ratio stay within 1 +- this param\n                                            stored as parts per million */\n    uint public allowedLtdDifferenceAmount; /* in token - if totalLoan and totalLock difference is less than that\n                                             then allow loan or lock even if ltdDifference limit would go off with it */\n\n    event ParamsChanged(uint ltdDifferenceLimit, uint allowedLtdDifferenceAmount);\n\n    function MonetarySupervisor(AugmintTokenInterface _augmintToken, AugmintReserves _augmintReserves,\n        InterestEarnedAccount _interestEarnedAccount,\n        uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount) public {\n        augmintToken = _augmintToken;\n        augmintReserves = _augmintReserves;\n        interestEarnedAccount = _interestEarnedAccount;\n\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n    }\n\n    function issueToReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.add(amount);\n        augmintToken.issueTo(augmintReserves, amount);\n    }\n\n    function burnFromReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.sub(amount);\n        augmintReserves.burn(augmintToken, amount);\n    }\n\n    // Locker requesting interest when locking funds\n    function requestInterest(uint amountToLock, uint interestAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        /* TODO: enforce LTD limits (ltdDifferenceLimit & allowedLtdDifferenceAmount) */\n\n        totalLockedAmount = totalLockedAmount.add(amountToLock);\n        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\n    }\n\n    // Locker notifying when releasing funds to update KPIs\n    function releaseFundsNotification(uint lockedAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\n    }\n\n    function issueLoan(address borrower, uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted LoanManager contracts\n        totalLoanAmount = totalLoanAmount.add(loanAmount);\n        augmintToken.issueTo(borrower, loanAmount);\n    }\n\n    function loanRepaymentNotification(uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(loanAmount);\n    }\n\n    // NB: this is called by Lender contract with the sum of all loans collected in batch\n    function loanCollectionNotification(uint totalLoanAmountCollected) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\n    }\n\n    function setParams(uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount)\n    external restrict(\"MonetaryBoard\") {\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n\n        ParamsChanged(ltdDifferenceLimit, allowedLtdDifferenceAmount);\n    }\n\n    // helper function for FrontEnd to reduce calls\n    function getParams() external view returns(uint[2]) {\n        return [ltdDifferenceLimit, allowedLtdDifferenceAmount];\n    }\n\n}\n"
      },
      "legacy": [
        {
          "address": "0xd0c273bb6023611f166e92105232fb225392013b",
          "generatedAt": "2018-04-23T20:17:34.327Z",
          "compiler": {
            "name": "solc",
            "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
          },
          "byteCodeHash": "0c0d7f8840d3267bcc4625b5d0b07c6b",
          "sourceHash": "3d16faed337b9adec2d66024be645249",
          "source": "/* MonetarySupervisor\n    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\n    - holds system wide parameters/limits\n    - enforces system wide limits\n    - burns and issues to AugmintReserves\n    - Send funds from reserve to exchange when intervening (not implemented yet)\n\n    TODO:\n        - MonetarySupervisorInterface (and use it everywhere)\n        - interestEarnedAccount setter?\n        - create and use InterestEarnedAccount interface instead?\n\n*/\n\npragma solidity 0.4.19;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./AugmintReserves.sol\";\n\n\ncontract MonetarySupervisor is Restricted { // solhint-disable-line no-empty-blocks\n    using SafeMath for uint256;\n\n    AugmintTokenInterface public augmintToken;\n    InterestEarnedAccount public interestEarnedAccount;\n    AugmintReserves public augmintReserves;\n\n    uint public issuedByMonetaryBoard; // supply issued manually by monetary board\n\n    uint public totalLoanAmount; // total amount of all loans without interest, in token\n    uint public totalLockedAmount; // total amount of all locks without premium, in token\n\n    /* Parameters Used to ensure totalLoanAmount or totalLockedAmount difference is withing limit and system also works\n        when any of those 0 or low. */\n    uint public ltdDifferenceLimit;     /* allow lock or loan if Loan To Deposut ratio stay within 1 +- this param\n                                            stored as parts per million */\n    uint public allowedLtdDifferenceAmount; /* in token - if totalLoan and totalLock difference is less than that\n                                             then allow loan or lock even if ltdDifference limit would go off with it */\n\n    event ParamsChanged(uint ltdDifferenceLimit, uint allowedLtdDifferenceAmount);\n\n    function MonetarySupervisor(AugmintTokenInterface _augmintToken, AugmintReserves _augmintReserves,\n        InterestEarnedAccount _interestEarnedAccount,\n        uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount) public {\n        augmintToken = _augmintToken;\n        augmintReserves = _augmintReserves;\n        interestEarnedAccount = _interestEarnedAccount;\n\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n    }\n\n    function issueToReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.add(amount);\n        augmintToken.issueTo(augmintReserves, amount);\n    }\n\n    function burnFromReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.sub(amount);\n        augmintReserves.burn(augmintToken, amount);\n    }\n\n    // Locker requesting interest when locking funds\n    function requestInterest(uint amountToLock, uint interestAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        /* TODO: enforce LTD limits (ltdDifferenceLimit & allowedLtdDifferenceAmount) */\n\n        totalLockedAmount = totalLockedAmount.add(amountToLock);\n        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\n    }\n\n    // Locker notifying when releasing funds to update KPIs\n    function releaseFundsNotification(uint lockedAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\n    }\n\n    function issueLoan(address borrower, uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted LoanManager contracts\n        totalLoanAmount = totalLoanAmount.add(loanAmount);\n        augmintToken.issueTo(borrower, loanAmount);\n    }\n\n    function loanRepaymentNotification(uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(loanAmount);\n    }\n\n    // NB: this is called by Lender contract with the sum of all loans collected in batch\n    function loanCollectionNotification(uint totalLoanAmountCollected) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\n    }\n\n    function setParams(uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount)\n    external restrict(\"MonetaryBoard\") {\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n\n        ParamsChanged(ltdDifferenceLimit, allowedLtdDifferenceAmount);\n    }\n\n    // helper function for FrontEnd to reduce calls\n    function getParams() external view returns(uint[2]) {\n        return [ltdDifferenceLimit, allowedLtdDifferenceAmount];\n    }\n\n}\n"
        }
      ]
    },
    "999": {
      "latest": {
        "address": "0x88166fdc3c3e6768c375488fa45c90f1b904a767",
        "generatedAt": "2018-04-23T20:18:33.173Z",
        "compiler": {
          "name": "solc",
          "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
        },
        "byteCodeHash": "aaa00593c08a52c6bbce73d97d28e20a",
        "sourceHash": "3d16faed337b9adec2d66024be645249",
        "source": "/* MonetarySupervisor\n    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\n    - holds system wide parameters/limits\n    - enforces system wide limits\n    - burns and issues to AugmintReserves\n    - Send funds from reserve to exchange when intervening (not implemented yet)\n\n    TODO:\n        - MonetarySupervisorInterface (and use it everywhere)\n        - interestEarnedAccount setter?\n        - create and use InterestEarnedAccount interface instead?\n\n*/\n\npragma solidity 0.4.19;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./AugmintReserves.sol\";\n\n\ncontract MonetarySupervisor is Restricted { // solhint-disable-line no-empty-blocks\n    using SafeMath for uint256;\n\n    AugmintTokenInterface public augmintToken;\n    InterestEarnedAccount public interestEarnedAccount;\n    AugmintReserves public augmintReserves;\n\n    uint public issuedByMonetaryBoard; // supply issued manually by monetary board\n\n    uint public totalLoanAmount; // total amount of all loans without interest, in token\n    uint public totalLockedAmount; // total amount of all locks without premium, in token\n\n    /* Parameters Used to ensure totalLoanAmount or totalLockedAmount difference is withing limit and system also works\n        when any of those 0 or low. */\n    uint public ltdDifferenceLimit;     /* allow lock or loan if Loan To Deposut ratio stay within 1 +- this param\n                                            stored as parts per million */\n    uint public allowedLtdDifferenceAmount; /* in token - if totalLoan and totalLock difference is less than that\n                                             then allow loan or lock even if ltdDifference limit would go off with it */\n\n    event ParamsChanged(uint ltdDifferenceLimit, uint allowedLtdDifferenceAmount);\n\n    function MonetarySupervisor(AugmintTokenInterface _augmintToken, AugmintReserves _augmintReserves,\n        InterestEarnedAccount _interestEarnedAccount,\n        uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount) public {\n        augmintToken = _augmintToken;\n        augmintReserves = _augmintReserves;\n        interestEarnedAccount = _interestEarnedAccount;\n\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n    }\n\n    function issueToReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.add(amount);\n        augmintToken.issueTo(augmintReserves, amount);\n    }\n\n    function burnFromReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.sub(amount);\n        augmintReserves.burn(augmintToken, amount);\n    }\n\n    // Locker requesting interest when locking funds\n    function requestInterest(uint amountToLock, uint interestAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        /* TODO: enforce LTD limits (ltdDifferenceLimit & allowedLtdDifferenceAmount) */\n\n        totalLockedAmount = totalLockedAmount.add(amountToLock);\n        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\n    }\n\n    // Locker notifying when releasing funds to update KPIs\n    function releaseFundsNotification(uint lockedAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\n    }\n\n    function issueLoan(address borrower, uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted LoanManager contracts\n        totalLoanAmount = totalLoanAmount.add(loanAmount);\n        augmintToken.issueTo(borrower, loanAmount);\n    }\n\n    function loanRepaymentNotification(uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(loanAmount);\n    }\n\n    // NB: this is called by Lender contract with the sum of all loans collected in batch\n    function loanCollectionNotification(uint totalLoanAmountCollected) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\n    }\n\n    function setParams(uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount)\n    external restrict(\"MonetaryBoard\") {\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n\n        ParamsChanged(ltdDifferenceLimit, allowedLtdDifferenceAmount);\n    }\n\n    // helper function for FrontEnd to reduce calls\n    function getParams() external view returns(uint[2]) {\n        return [ltdDifferenceLimit, allowedLtdDifferenceAmount];\n    }\n\n}\n"
      },
      "legacy": [
        {
          "address": "0x213135c85437c23bc529a2ee9c2980646c332fcb",
          "generatedAt": "2018-04-23T20:17:34.327Z",
          "compiler": {
            "name": "solc",
            "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
          },
          "byteCodeHash": "0c0d7f8840d3267bcc4625b5d0b07c6b",
          "sourceHash": "3d16faed337b9adec2d66024be645249",
          "source": "/* MonetarySupervisor\n    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\n    - holds system wide parameters/limits\n    - enforces system wide limits\n    - burns and issues to AugmintReserves\n    - Send funds from reserve to exchange when intervening (not implemented yet)\n\n    TODO:\n        - MonetarySupervisorInterface (and use it everywhere)\n        - interestEarnedAccount setter?\n        - create and use InterestEarnedAccount interface instead?\n\n*/\n\npragma solidity 0.4.19;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./AugmintReserves.sol\";\n\n\ncontract MonetarySupervisor is Restricted { // solhint-disable-line no-empty-blocks\n    using SafeMath for uint256;\n\n    AugmintTokenInterface public augmintToken;\n    InterestEarnedAccount public interestEarnedAccount;\n    AugmintReserves public augmintReserves;\n\n    uint public issuedByMonetaryBoard; // supply issued manually by monetary board\n\n    uint public totalLoanAmount; // total amount of all loans without interest, in token\n    uint public totalLockedAmount; // total amount of all locks without premium, in token\n\n    /* Parameters Used to ensure totalLoanAmount or totalLockedAmount difference is withing limit and system also works\n        when any of those 0 or low. */\n    uint public ltdDifferenceLimit;     /* allow lock or loan if Loan To Deposut ratio stay within 1 +- this param\n                                            stored as parts per million */\n    uint public allowedLtdDifferenceAmount; /* in token - if totalLoan and totalLock difference is less than that\n                                             then allow loan or lock even if ltdDifference limit would go off with it */\n\n    event ParamsChanged(uint ltdDifferenceLimit, uint allowedLtdDifferenceAmount);\n\n    function MonetarySupervisor(AugmintTokenInterface _augmintToken, AugmintReserves _augmintReserves,\n        InterestEarnedAccount _interestEarnedAccount,\n        uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount) public {\n        augmintToken = _augmintToken;\n        augmintReserves = _augmintReserves;\n        interestEarnedAccount = _interestEarnedAccount;\n\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n    }\n\n    function issueToReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.add(amount);\n        augmintToken.issueTo(augmintReserves, amount);\n    }\n\n    function burnFromReserve(uint amount) external restrict(\"MonetaryBoard\") {\n        issuedByMonetaryBoard = issuedByMonetaryBoard.sub(amount);\n        augmintReserves.burn(augmintToken, amount);\n    }\n\n    // Locker requesting interest when locking funds\n    function requestInterest(uint amountToLock, uint interestAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        /* TODO: enforce LTD limits (ltdDifferenceLimit & allowedLtdDifferenceAmount) */\n\n        totalLockedAmount = totalLockedAmount.add(amountToLock);\n        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\n    }\n\n    // Locker notifying when releasing funds to update KPIs\n    function releaseFundsNotification(uint lockedAmount) external {\n        require(permissions[msg.sender][\"LockerContracts\"]); // only whitelisted LockerContracts\n        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\n    }\n\n    function issueLoan(address borrower, uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted LoanManager contracts\n        totalLoanAmount = totalLoanAmount.add(loanAmount);\n        augmintToken.issueTo(borrower, loanAmount);\n    }\n\n    function loanRepaymentNotification(uint loanAmount) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(loanAmount);\n    }\n\n    // NB: this is called by Lender contract with the sum of all loans collected in batch\n    function loanCollectionNotification(uint totalLoanAmountCollected) external {\n        require(permissions[msg.sender][\"LoanManagerContracts\"]); // only whitelisted Lender contracts\n        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\n    }\n\n    function setParams(uint _ltdDifferenceLimit, uint _allowedLtdDifferenceAmount)\n    external restrict(\"MonetaryBoard\") {\n        ltdDifferenceLimit = _ltdDifferenceLimit;\n        allowedLtdDifferenceAmount = _allowedLtdDifferenceAmount;\n\n        ParamsChanged(ltdDifferenceLimit, allowedLtdDifferenceAmount);\n    }\n\n    // helper function for FrontEnd to reduce calls\n    function getParams() external view returns(uint[2]) {\n        return [ltdDifferenceLimit, allowedLtdDifferenceAmount];\n    }\n\n}\n"
        }
      ]
    }
  }
}
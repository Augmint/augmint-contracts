{
  "contractName": "Exchange",
  "latestAbiHash": "3c157a5256a2093da587f166d4dbd537",
  "deployedAbis": {
    "3aa2aedd2972391a12570ba4bfca2f72": {
      "latestDeployedAddress": "0x03fe291f8a30e54cd05459f368d554b40784ca78",
      "deployments": {
        "0x65d30e5a6191a507fda96341f6ba773c4224c0e1": {
          "generatedAt": "2018-04-25T12:29:07.683Z",
          "truffleContractFileUpdatedAt": "2018-02-14T23:31:03.072Z",
          "compiler": {
            "name": "solc",
            "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
          },
          "bytecodeHash": "95533c8abeab1480f1c82f2f0593dae8",
          "deployedBytecodeHash": "ce8bd79d6703d524cb59226bc11fc7d8",
          "sourceHash": "c308207b18b39a21996dc30f8a59bc2f",
          "source": "/* Augmint's Internal Exchange\n\n  For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/exchangeFlow.png\n\n    TODO:\n        - deduct fee\n        - consider take funcs (frequent rate changes with takeBuyToken? send more and send back remainder?)\n*/\npragma solidity 0.4.19;\n\nimport \"./generic/SafeMath.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\n\ncontract Exchange {\n    using SafeMath for uint256;\n    AugmintTokenInterface public augmintToken;\n\n    uint public constant CHUNK_SIZE = 100;\n\n    struct Order {\n        uint64 index;\n        address maker;\n\n        // tokens per ether\n        uint32 price;\n\n        // buy order: amount in wei \n        // sell order: token amount\n        uint amount;    \n    }\n\n    uint64 public orderCount;\n    mapping(uint64 => Order) public buyTokenOrders;\n    mapping(uint64 => Order) public sellTokenOrders;\n\n    uint64[] private activeBuyOrders;\n    uint64[] private activeSellOrders;\n\n    /* used to stop executing matchMultiple when running out of gas.\n        actual is much less, just leaving enough matchMultipleOrders() to finish TODO: fine tune & test it*/\n    uint32 private constant ORDER_MATCH_WORST_GAS = 100000;\n\n    event NewOrder(uint64 indexed orderId, address indexed maker, uint32 price, uint tokenAmount,\n        uint weiAmount);\n\n    event OrderFill(address indexed tokenBuyer, address indexed tokenSeller, uint64 buyTokenOrderId,\n        uint64 sellTokenOrderId, uint32 price, uint weiAmount, uint tokenAmount);\n\n    event CancelledOrder(uint64 indexed orderId, address indexed maker, uint tokenAmount, uint weiAmount);\n\n    function Exchange(AugmintTokenInterface _augmintToken) public {\n        augmintToken = _augmintToken;\n    }\n\n    function placeBuyTokenOrder(uint32 price) external payable returns (uint64 orderId) {\n        require(price > 0);\n        require(msg.value > 0);\n\n        orderId = ++orderCount;        \n        buyTokenOrders[orderId] = Order(uint64(activeBuyOrders.length), msg.sender, price, msg.value);\n        activeBuyOrders.push(orderId);\n\n        NewOrder(orderId, msg.sender, price, 0, msg.value);\n    }\n\n    /* this function requires previous approval to transfer tokens */\n    function placeSellTokenOrder(uint32 price, uint tokenAmount) external returns (uint orderId) {\n        augmintToken.transferFrom(msg.sender, this, tokenAmount);\n        return _placeSellTokenOrder(msg.sender, price, tokenAmount);\n    }\n\n    function cancelBuyTokenOrder(uint64 buyTokenId) external {\n        Order storage order = buyTokenOrders[buyTokenId];\n        require(order.maker == msg.sender);\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeBuyOrder(order);\n\n        msg.sender.transfer(amount);\n\n        CancelledOrder(buyTokenId, msg.sender, 0, amount);\n    }\n\n    function cancelSellTokenOrder(uint64 sellTokenId) external {\n        Order storage order = sellTokenOrders[sellTokenId];\n        require(order.maker == msg.sender);\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeSellOrder(order);\n\n        augmintToken.transferWithNarrative(msg.sender, amount, \"Sell token order cancelled\");\n\n        CancelledOrder(sellTokenId, msg.sender, amount, 0);\n    }\n\n    /* matches any two orders if the sell price >= buy price\n        trade price meets in the middle\n        reverts if any of the orders have been removed\n    */\n    function matchOrders(uint64 buyTokenId, uint64 sellTokenId) external {\n        _fillOrder(buyTokenId, sellTokenId);\n    }\n\n    /*  matches as many orders as possible from the passed orders\n        Runs as long as gas is available for the call.\n        Stops if any match is invalid (case when any of the orders removed after client generated the match list sent)\n    */\n    function matchMultipleOrders(uint64[] buyTokenIds, uint64[] sellTokenIds) external returns(uint matchCount) {\n        uint len = buyTokenIds.length;\n        require(len == sellTokenIds.length);\n        for (uint i = 0; i < len && msg.gas > ORDER_MATCH_WORST_GAS; i++) {\n            _fillOrder(buyTokenIds[i], sellTokenIds[i]);\n            matchCount++;\n        }\n    }\n\n    function getActiveOrderCounts() external view returns(uint buyTokenOrderCount, uint sellTokenOrderCount) {\n        return(activeBuyOrders.length, activeSellOrders.length);\n    }\n\n    // returns CHUNK_SIZE orders starting from offset\n    // orders are encoded as [id, maker, price, amount]\n    function getActiveBuyOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeBuyOrders.length; i++) {\n            uint64 orderId = activeBuyOrders[offset + i];\n            Order storage order = buyTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function getActiveSellOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeSellOrders.length; i++) {\n            uint64 orderId = activeSellOrders[offset + i];\n            Order storage order = sellTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    /* place sell token order called from AugmintToken's transferAndNotify\n     Flow:\n        1) user calls token contract's transferAndNotify price passed in data arg\n        2) transferAndNotify transfers tokens to the Exchange contract\n        3) transferAndNotify calls Exchange.transferNotification with lockProductId\n    */\n    function transferNotification(address maker, uint tokenAmount, uint price) public {\n        require(msg.sender == address(augmintToken));\n        _placeSellTokenOrder(maker, uint32(price), tokenAmount);\n    }\n\n    function _fillOrder(uint64 buyTokenId, uint64 sellTokenId) private {\n        Order storage buy = buyTokenOrders[buyTokenId];\n        Order storage sell = sellTokenOrders[sellTokenId];\n\n        require(buy.price >= sell.price);\n\n        // meet in the middle\n        uint price = uint(buy.price).add(sell.price).div(2);\n\n        uint sellWei = sell.amount.mul(1 ether).div(price);\n\n        uint tradedWei;\n        uint tradedTokens;\n        if (sellWei <= buy.amount) {\n            tradedWei = sellWei;\n            tradedTokens = sell.amount;\n        } else {\n            tradedWei = buy.amount;\n            tradedTokens = buy.amount.mul(price).div(1 ether);\n        }\n\n        buy.amount = buy.amount.sub(tradedWei);\n        if (buy.amount == 0) {\n            _removeBuyOrder(buy);\n        }\n\n        sell.amount = sell.amount.sub(tradedTokens);\n        if (sell.amount == 0) {\n            _removeSellOrder(sell);\n        }\n\n        augmintToken.transferWithNarrative(buy.maker, tradedTokens, \"Buy token order fill\");\n        sell.maker.transfer(tradedWei);\n\n        OrderFill(buy.maker, sell.maker, buyTokenId,\n            sellTokenId, uint32(price), tradedWei, tradedTokens);\n    }\n\n\n    function _placeSellTokenOrder(address maker, uint32 price, uint tokenAmount)\n    private returns (uint64 orderId) {\n        require(price > 0);\n        require(tokenAmount > 0);\n\n        orderId = ++orderCount;\n        sellTokenOrders[orderId] = Order(uint64(activeSellOrders.length), maker, price, tokenAmount);\n        activeSellOrders.push(orderId);\n\n        NewOrder(orderId, maker, price, tokenAmount, 0);\n    }\n\n    function _removeBuyOrder(Order storage order) private {\n        _removeOrder(activeBuyOrders, order.index);\n    }\n\n    function _removeSellOrder(Order storage order) private {\n        _removeOrder(activeSellOrders, order.index);\n    }\n\n    function _removeOrder(uint64[] storage orders, uint64 index) private {\n        if (index < orders.length - 1) {\n            orders[index] = orders[orders.length - 1];\n        }\n        orders.length--;\n    }\n\n}\n"
        },
        "0x03fe291f8a30e54cd05459f368d554b40784ca78": {
          "generatedAt": "2018-04-25T12:30:49.487Z",
          "truffleContractFileUpdatedAt": "2018-02-27T07:35:58.103Z",
          "compiler": {
            "name": "solc",
            "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
          },
          "bytecodeHash": "e47f3492d775d281872d832c98118822",
          "deployedBytecodeHash": "8656667e0062d2a11e000c4d34d156db",
          "sourceHash": "eacd00fb6a1cfd4cd37484832bef5f6b",
          "source": "/* Augmint's Internal Exchange\n\n  For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/exchangeFlow.png\n\n    TODO:\n        - deduct fee\n        - consider take funcs (frequent rate changes with takeBuyToken? send more and send back remainder?)\n*/\npragma solidity 0.4.19;\n\nimport \"./generic/SafeMath.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\n\n\ncontract Exchange {\n    using SafeMath for uint256;\n    AugmintTokenInterface public augmintToken;\n\n    uint public constant CHUNK_SIZE = 100;\n\n    struct Order {\n        uint64 index;\n        address maker;\n\n        // tokens per ether\n        uint32 price;\n\n        // buy order: amount in wei\n        // sell order: token amount\n        uint amount;\n    }\n\n    uint64 public orderCount;\n    mapping(uint64 => Order) public buyTokenOrders;\n    mapping(uint64 => Order) public sellTokenOrders;\n\n    uint64[] private activeBuyOrders;\n    uint64[] private activeSellOrders;\n\n    /* used to stop executing matchMultiple when running out of gas.\n        actual is much less, just leaving enough matchMultipleOrders() to finish TODO: fine tune & test it*/\n    uint32 private constant ORDER_MATCH_WORST_GAS = 100000;\n\n    event NewOrder(uint64 indexed orderId, address indexed maker, uint32 price, uint tokenAmount,\n        uint weiAmount);\n\n    event OrderFill(address indexed tokenBuyer, address indexed tokenSeller, uint64 buyTokenOrderId,\n        uint64 sellTokenOrderId, uint32 price, uint weiAmount, uint tokenAmount);\n\n    event CancelledOrder(uint64 indexed orderId, address indexed maker, uint tokenAmount, uint weiAmount);\n\n    function Exchange(AugmintTokenInterface _augmintToken) public {\n        augmintToken = _augmintToken;\n    }\n\n    function placeBuyTokenOrder(uint32 price) external payable returns (uint64 orderId) {\n        require(price > 0);\n        require(msg.value > 0);\n\n        orderId = ++orderCount;\n        buyTokenOrders[orderId] = Order(uint64(activeBuyOrders.length), msg.sender, price, msg.value);\n        activeBuyOrders.push(orderId);\n\n        NewOrder(orderId, msg.sender, price, 0, msg.value);\n    }\n\n    /* this function requires previous approval to transfer tokens */\n    function placeSellTokenOrder(uint32 price, uint tokenAmount) external returns (uint orderId) {\n        augmintToken.transferFrom(msg.sender, this, tokenAmount);\n        return _placeSellTokenOrder(msg.sender, price, tokenAmount);\n    }\n\n    function cancelBuyTokenOrder(uint64 buyTokenId) external {\n        Order storage order = buyTokenOrders[buyTokenId];\n        require(order.maker == msg.sender);\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeBuyOrder(order);\n\n        msg.sender.transfer(amount);\n\n        CancelledOrder(buyTokenId, msg.sender, 0, amount);\n    }\n\n    function cancelSellTokenOrder(uint64 sellTokenId) external {\n        Order storage order = sellTokenOrders[sellTokenId];\n        require(order.maker == msg.sender);\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeSellOrder(order);\n\n        augmintToken.transferWithNarrative(msg.sender, amount, \"Sell token order cancelled\");\n\n        CancelledOrder(sellTokenId, msg.sender, amount, 0);\n    }\n\n    /* matches any two orders if the sell price >= buy price\n        trade price meets in the middle\n        reverts if any of the orders have been removed\n    */\n    function matchOrders(uint64 buyTokenId, uint64 sellTokenId) external {\n        _fillOrder(buyTokenId, sellTokenId);\n    }\n\n    /*  matches as many orders as possible from the passed orders\n        Runs as long as gas is available for the call.\n        Stops if any match is invalid (case when any of the orders removed after client generated the match list sent)\n    */\n    function matchMultipleOrders(uint64[] buyTokenIds, uint64[] sellTokenIds) external returns(uint matchCount) {\n        uint len = buyTokenIds.length;\n        require(len == sellTokenIds.length);\n        for (uint i = 0; i < len && msg.gas > ORDER_MATCH_WORST_GAS; i++) {\n            _fillOrder(buyTokenIds[i], sellTokenIds[i]);\n            matchCount++;\n        }\n    }\n\n    function getActiveOrderCounts() external view returns(uint buyTokenOrderCount, uint sellTokenOrderCount) {\n        return(activeBuyOrders.length, activeSellOrders.length);\n    }\n\n    // returns CHUNK_SIZE orders starting from offset\n    // orders are encoded as [id, maker, price, amount]\n    function getActiveBuyOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeBuyOrders.length; i++) {\n            uint64 orderId = activeBuyOrders[offset + i];\n            Order storage order = buyTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function getActiveSellOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeSellOrders.length; i++) {\n            uint64 orderId = activeSellOrders[offset + i];\n            Order storage order = sellTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    /* place sell token order called from AugmintToken's transferAndNotify\n     Flow:\n        1) user calls token contract's transferAndNotify price passed in data arg\n        2) transferAndNotify transfers tokens to the Exchange contract\n        3) transferAndNotify calls Exchange.transferNotification with lockProductId\n    */\n    function transferNotification(address maker, uint tokenAmount, uint price) public {\n        require(msg.sender == address(augmintToken));\n        _placeSellTokenOrder(maker, uint32(price), tokenAmount);\n    }\n\n    function _fillOrder(uint64 buyTokenId, uint64 sellTokenId) private {\n        Order storage buy = buyTokenOrders[buyTokenId];\n        Order storage sell = sellTokenOrders[sellTokenId];\n\n        require(buy.price >= sell.price);\n\n        // meet in the middle\n        uint price = uint(buy.price).add(sell.price).div(2);\n\n        uint sellWei = sell.amount.mul(1 ether).roundedDiv(price);\n\n        uint tradedWei;\n        uint tradedTokens;\n        if (sellWei <= buy.amount) {\n            tradedWei = sellWei;\n            tradedTokens = sell.amount;\n        } else {\n            tradedWei = buy.amount;\n            tradedTokens = buy.amount.mul(price).roundedDiv(1 ether);\n        }\n\n        buy.amount = buy.amount.sub(tradedWei);\n        if (buy.amount == 0) {\n            _removeBuyOrder(buy);\n        }\n\n        sell.amount = sell.amount.sub(tradedTokens);\n        if (sell.amount == 0) {\n            _removeSellOrder(sell);\n        }\n\n        augmintToken.transferWithNarrative(buy.maker, tradedTokens, \"Buy token order fill\");\n        sell.maker.transfer(tradedWei);\n\n        OrderFill(buy.maker, sell.maker, buyTokenId,\n            sellTokenId, uint32(price), tradedWei, tradedTokens);\n    }\n\n    function _placeSellTokenOrder(address maker, uint32 price, uint tokenAmount)\n    private returns (uint64 orderId) {\n        require(price > 0);\n        require(tokenAmount > 0);\n\n        orderId = ++orderCount;\n        sellTokenOrders[orderId] = Order(uint64(activeSellOrders.length), maker, price, tokenAmount);\n        activeSellOrders.push(orderId);\n\n        NewOrder(orderId, maker, price, tokenAmount, 0);\n    }\n\n    function _removeBuyOrder(Order storage order) private {\n        _removeOrder(activeBuyOrders, order.index);\n    }\n\n    function _removeSellOrder(Order storage order) private {\n        _removeOrder(activeSellOrders, order.index);\n    }\n\n    function _removeOrder(uint64[] storage orders, uint64 index) private {\n        if (index < orders.length - 1) {\n            orders[index] = orders[orders.length - 1];\n        }\n        orders.length--;\n    }\n\n}\n"
        }
      }
    },
    "7595b255e567ae1d0eeef4460d0b0c16": {
      "latestDeployedAddress": "0x86abc21cbb508fcb303f881d6871e4f870ce041a",
      "deployments": {
        "0x86abc21cbb508fcb303f881d6871e4f870ce041a": {
          "generatedAt": "2018-04-25T12:31:29.262Z",
          "truffleContractFileUpdatedAt": "2018-04-20T18:25:08.442Z",
          "deployTransactionHash": "0x8ac6b0922fc9cad4d2e4745b329b4ec4fa6d2bfaf4f5f6361fa816b860cff1a9",
          "compiler": {
            "name": "solc",
            "version": "0.4.23+commit.124ca40d.Emscripten.clang"
          },
          "bytecodeHash": "4dbd56e92e7a2abc0cef7a5e3b8c58db",
          "deployedBytecodeHash": "7d6fb687ffba76ae852474db1aec571f",
          "sourceHash": "016483ae7a2ba57c530701e7db3df989",
          "source": "/* Augmint's Internal Exchange\n\n  For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/exchangeFlow.png\n\n    TODO:\n        - deduct fee\n        - consider take funcs (frequent rate changes with takeBuyToken? send more and send back remainder?)\n*/\npragma solidity ^0.4.23;\n\nimport \"./generic/SafeMath.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\n\n\ncontract Exchange {\n    using SafeMath for uint256;\n    AugmintTokenInterface public augmintToken;\n\n    uint public constant CHUNK_SIZE = 100;\n\n    struct Order {\n        uint64 index;\n        address maker;\n\n        // tokens per ether\n        uint32 price;\n\n        // buy order: amount in wei\n        // sell order: token amount\n        uint amount;\n    }\n\n    uint64 public orderCount;\n    mapping(uint64 => Order) public buyTokenOrders;\n    mapping(uint64 => Order) public sellTokenOrders;\n\n    uint64[] private activeBuyOrders;\n    uint64[] private activeSellOrders;\n\n    /* used to stop executing matchMultiple when running out of gas.\n        actual is much less, just leaving enough matchMultipleOrders() to finish TODO: fine tune & test it*/\n    uint32 private constant ORDER_MATCH_WORST_GAS = 100000;\n\n    event NewOrder(uint64 indexed orderId, address indexed maker, uint32 price, uint tokenAmount,\n        uint weiAmount);\n\n    event OrderFill(address indexed tokenBuyer, address indexed tokenSeller, uint64 buyTokenOrderId,\n        uint64 sellTokenOrderId, uint32 price, uint weiAmount, uint tokenAmount);\n\n    event CancelledOrder(uint64 indexed orderId, address indexed maker, uint tokenAmount, uint weiAmount);\n\n    constructor(AugmintTokenInterface _augmintToken) public {\n        augmintToken = _augmintToken;\n    }\n\n    function placeBuyTokenOrder(uint32 price) external payable returns (uint64 orderId) {\n        require(price > 0, \"price must be > 0\");\n        require(msg.value > 0, \"msg.value must be > 0\");\n\n        orderId = ++orderCount;\n        buyTokenOrders[orderId] = Order(uint64(activeBuyOrders.length), msg.sender, price, msg.value);\n        activeBuyOrders.push(orderId);\n\n        emit NewOrder(orderId, msg.sender, price, 0, msg.value);\n    }\n\n    /* this function requires previous approval to transfer tokens */\n    function placeSellTokenOrder(uint32 price, uint tokenAmount) external returns (uint orderId) {\n        augmintToken.transferFrom(msg.sender, this, tokenAmount);\n        return _placeSellTokenOrder(msg.sender, price, tokenAmount);\n    }\n\n    /* place sell token order called from AugmintToken's transferAndNotify\n     Flow:\n        1) user calls token contract's transferAndNotify price passed in data arg\n        2) transferAndNotify transfers tokens to the Exchange contract\n        3) transferAndNotify calls Exchange.transferNotification with lockProductId\n    */\n    function transferNotification(address maker, uint tokenAmount, uint price) external {\n        require(msg.sender == address(augmintToken), \"msg.sender must be augmintToken\");\n        _placeSellTokenOrder(maker, uint32(price), tokenAmount);\n    }\n\n    function cancelBuyTokenOrder(uint64 buyTokenId) external {\n        Order storage order = buyTokenOrders[buyTokenId];\n        require(order.maker == msg.sender, \"msg.sender must be order.maker\");\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeBuyOrder(order);\n\n        msg.sender.transfer(amount);\n\n        emit CancelledOrder(buyTokenId, msg.sender, 0, amount);\n    }\n\n    function cancelSellTokenOrder(uint64 sellTokenId) external {\n        Order storage order = sellTokenOrders[sellTokenId];\n        require(order.maker == msg.sender, \"msg.sender must be order.maker\");\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeSellOrder(order);\n\n        augmintToken.transferWithNarrative(msg.sender, amount, \"Sell token order cancelled\");\n\n        emit CancelledOrder(sellTokenId, msg.sender, amount, 0);\n    }\n\n    /* matches any two orders if the sell price >= buy price\n        trade price meets in the middle\n        reverts if any of the orders have been removed\n    */\n    function matchOrders(uint64 buyTokenId, uint64 sellTokenId) external {\n        _fillOrder(buyTokenId, sellTokenId);\n    }\n\n    /*  matches as many orders as possible from the passed orders\n        Runs as long as gas is available for the call.\n        Stops if any match is invalid (case when any of the orders removed after client generated the match list sent)\n    */\n    function matchMultipleOrders(uint64[] buyTokenIds, uint64[] sellTokenIds) external returns(uint matchCount) {\n        uint len = buyTokenIds.length;\n        for (uint i = 0; i < len && gasleft() > ORDER_MATCH_WORST_GAS; i++) {\n        require(len == sellTokenIds.length, \"buyTokenIds and sellTokenIds lengths must be equal\");\n            _fillOrder(buyTokenIds[i], sellTokenIds[i]);\n            matchCount++;\n        }\n    }\n\n    function getActiveOrderCounts() external view returns(uint buyTokenOrderCount, uint sellTokenOrderCount) {\n        return(activeBuyOrders.length, activeSellOrders.length);\n    }\n\n    // returns CHUNK_SIZE orders starting from offset\n    // orders are encoded as [id, maker, price, amount]\n    function getActiveBuyOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeBuyOrders.length; i++) {\n            uint64 orderId = activeBuyOrders[offset + i];\n            Order storage order = buyTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function getActiveSellOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeSellOrders.length; i++) {\n            uint64 orderId = activeSellOrders[offset + i];\n            Order storage order = sellTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function _fillOrder(uint64 buyTokenId, uint64 sellTokenId) private {\n        Order storage buy = buyTokenOrders[buyTokenId];\n        Order storage sell = sellTokenOrders[sellTokenId];\n\n        require(buy.price >= sell.price, \"buy price must be >= sell price\");\n\n        // meet in the middle\n        uint price = uint(buy.price).add(sell.price).div(2);\n\n        uint sellWei = sell.amount.mul(1 ether).roundedDiv(price);\n\n        uint tradedWei;\n        uint tradedTokens;\n        if (sellWei <= buy.amount) {\n            tradedWei = sellWei;\n            tradedTokens = sell.amount;\n        } else {\n            tradedWei = buy.amount;\n            tradedTokens = buy.amount.mul(price).roundedDiv(1 ether);\n        }\n\n        buy.amount = buy.amount.sub(tradedWei);\n        if (buy.amount == 0) {\n            _removeBuyOrder(buy);\n        }\n\n        sell.amount = sell.amount.sub(tradedTokens);\n        if (sell.amount == 0) {\n            _removeSellOrder(sell);\n        }\n\n        augmintToken.transferWithNarrative(buy.maker, tradedTokens, \"Buy token order fill\");\n        sell.maker.transfer(tradedWei);\n\n        emit OrderFill(buy.maker, sell.maker, buyTokenId,\n            sellTokenId, uint32(price), tradedWei, tradedTokens);\n    }\n\n    function _placeSellTokenOrder(address maker, uint32 price, uint tokenAmount)\n    private returns (uint64 orderId) {\n        require(price > 0, \"price must be > 0\");\n        require(tokenAmount > 0, \"tokenAmount must be > 0\");\n\n        orderId = ++orderCount;\n        sellTokenOrders[orderId] = Order(uint64(activeSellOrders.length), maker, price, tokenAmount);\n        activeSellOrders.push(orderId);\n\n        emit NewOrder(orderId, maker, price, tokenAmount, 0);\n    }\n\n    function _removeBuyOrder(Order storage order) private {\n        _removeOrder(activeBuyOrders, order.index);\n    }\n\n    function _removeSellOrder(Order storage order) private {\n        _removeOrder(activeSellOrders, order.index);\n    }\n\n    function _removeOrder(uint64[] storage orders, uint64 index) private {\n        if (index < orders.length - 1) {\n            orders[index] = orders[orders.length - 1];\n        }\n        orders.length--;\n    }\n\n}\n"
        }
      }
    },
    "3c157a5256a2093da587f166d4dbd537": {
      "latestDeployedAddress": "0xa2ed50765110b695816c658d5d6d1d32bcd03866",
      "deployments": {
        "0xa2ed50765110b695816c658d5d6d1d32bcd03866": {
          "generatedAt": "2018-05-03T22:05:03.992Z",
          "truffleContractFileUpdatedAt": "2018-05-03T22:03:50.411Z",
          "deployTransactionHash": "0x81cfef02417e36dc6538cbfc12b487a73779a6d8cdb5cde1ff2c30a02f70fb93",
          "compiler": {
            "name": "solc",
            "version": "0.4.23+commit.124ca40d.Emscripten.clang"
          },
          "bytecodeHash": "4a1da36560fdae5d5f9aeb9bb9e12f3e",
          "deployedBytecodeHash": "2c390a9b03f57a87af44432fc6444647",
          "sourceHash": "6e27bdbdc64d0d9cf52de1abc46c4cf7",
          "source": "/* Augmint's Internal Exchange\n\n  For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/exchangeFlow.png\n\n    TODO:\n        - change to wihtdrawal pattern, see: https://github.com/Augmint/augmint-contracts/issues/17\n        - deduct fee\n        - consider take funcs (frequent rate changes with takeBuyToken? send more and send back remainder?)\n        - use Rates interface?\n*/\npragma solidity ^0.4.23;\n\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./Rates.sol\";\n\n\ncontract Exchange is Restricted {\n    using SafeMath for uint256;\n\n    AugmintTokenInterface public augmintToken;\n    Rates public rates;\n\n    uint public constant CHUNK_SIZE = 100;\n\n    struct Order {\n        uint64 index;\n        address maker;\n\n        // % of published current peggedSymbol/ETH rates published by Rates contract. Stored as parts per million\n        // I.e. 1,000,000 = 100% (parity), 990,000 = 1% below parity\n        uint32 price;\n\n        // buy order: amount in wei\n        // sell order: token amount\n        uint amount;\n    }\n\n    uint64 public orderCount;\n    mapping(uint64 => Order) public buyTokenOrders;\n    mapping(uint64 => Order) public sellTokenOrders;\n\n    uint64[] private activeBuyOrders;\n    uint64[] private activeSellOrders;\n\n    /* used to stop executing matchMultiple when running out of gas.\n        actual is much less, just leaving enough matchMultipleOrders() to finish TODO: fine tune & test it*/\n    uint32 private constant ORDER_MATCH_WORST_GAS = 100000;\n\n    event NewOrder(uint64 indexed orderId, address indexed maker, uint32 price, uint tokenAmount, uint weiAmount);\n\n    event OrderFill(address indexed tokenBuyer, address indexed tokenSeller, uint64 buyTokenOrderId,\n        uint64 sellTokenOrderId, uint publishedRate, uint32 price, uint fillRate, uint weiAmount, uint tokenAmount);\n\n    event CancelledOrder(uint64 indexed orderId, address indexed maker, uint tokenAmount, uint weiAmount);\n\n    event RatesContractChanged(Rates newRatesContract);\n\n    constructor(AugmintTokenInterface _augmintToken, Rates _rates) public {\n        augmintToken = _augmintToken;\n        rates = _rates;\n    }\n\n    /* to allow upgrade of Rates  contract */\n    function setRatesContract(Rates newRatesContract)\n    external restrict(\"MonetaryBoard\") {\n        rates = newRatesContract;\n        emit RatesContractChanged(newRatesContract);\n    }\n\n    function placeBuyTokenOrder(uint32 price) external payable returns (uint64 orderId) {\n        require(price > 0, \"price must be > 0\");\n        require(msg.value > 0, \"msg.value must be > 0\");\n\n        orderId = ++orderCount;\n        buyTokenOrders[orderId] = Order(uint64(activeBuyOrders.length), msg.sender, price, msg.value);\n        activeBuyOrders.push(orderId);\n\n        emit NewOrder(orderId, msg.sender, price, 0, msg.value);\n    }\n\n    /* this function requires previous approval to transfer tokens */\n    function placeSellTokenOrder(uint32 price, uint tokenAmount) external returns (uint orderId) {\n        augmintToken.transferFrom(msg.sender, this, tokenAmount);\n        return _placeSellTokenOrder(msg.sender, price, tokenAmount);\n    }\n\n    /* place sell token order called from AugmintToken's transferAndNotify\n     Flow:\n        1) user calls token contract's transferAndNotify price passed in data arg\n        2) transferAndNotify transfers tokens to the Exchange contract\n        3) transferAndNotify calls Exchange.transferNotification with lockProductId\n    */\n    function transferNotification(address maker, uint tokenAmount, uint price) external {\n        require(msg.sender == address(augmintToken), \"msg.sender must be augmintToken\");\n        _placeSellTokenOrder(maker, uint32(price), tokenAmount);\n    }\n\n    function cancelBuyTokenOrder(uint64 buyTokenId) external {\n        Order storage order = buyTokenOrders[buyTokenId];\n        require(order.maker == msg.sender, \"msg.sender must be order.maker\");\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeBuyOrder(order);\n\n        msg.sender.transfer(amount);\n\n        emit CancelledOrder(buyTokenId, msg.sender, 0, amount);\n    }\n\n    function cancelSellTokenOrder(uint64 sellTokenId) external {\n        Order storage order = sellTokenOrders[sellTokenId];\n        require(order.maker == msg.sender, \"msg.sender must be order.maker\");\n\n        uint amount = order.amount;\n        order.amount = 0;\n        _removeSellOrder(order);\n\n        augmintToken.transferWithNarrative(msg.sender, amount, \"Sell token order cancelled\");\n\n        emit CancelledOrder(sellTokenId, msg.sender, amount, 0);\n    }\n\n    /* matches any two orders if the sell price >= buy price\n        trade price meets in the middle\n        reverts if any of the orders have been removed\n    */\n    function matchOrders(uint64 buyTokenId, uint64 sellTokenId) external {\n        _fillOrder(buyTokenId, sellTokenId);\n    }\n\n    /*  matches as many orders as possible from the passed orders\n        Runs as long as gas is available for the call.\n        Stops if any match is invalid (case when any of the orders removed after client generated the match list sent)\n    */\n    function matchMultipleOrders(uint64[] buyTokenIds, uint64[] sellTokenIds) external returns(uint matchCount) {\n        uint len = buyTokenIds.length;\n        require(len == sellTokenIds.length, \"buyTokenIds and sellTokenIds lengths must be equal\");\n\n        for (uint i = 0; i < len && gasleft() > ORDER_MATCH_WORST_GAS; i++) {\n            _fillOrder(buyTokenIds[i], sellTokenIds[i]);\n            matchCount++;\n        }\n    }\n\n    function getActiveOrderCounts() external view returns(uint buyTokenOrderCount, uint sellTokenOrderCount) {\n        return(activeBuyOrders.length, activeSellOrders.length);\n    }\n\n    // returns CHUNK_SIZE orders starting from offset\n    // orders are encoded as [id, maker, price, amount]\n    function getActiveBuyOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeBuyOrders.length; i++) {\n            uint64 orderId = activeBuyOrders[offset + i];\n            Order storage order = buyTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function getActiveSellOrders(uint offset) external view returns (uint[4][CHUNK_SIZE] response) {\n        for (uint8 i = 0; i < CHUNK_SIZE && i + offset < activeSellOrders.length; i++) {\n            uint64 orderId = activeSellOrders[offset + i];\n            Order storage order = sellTokenOrders[orderId];\n            response[i] = [orderId, uint(order.maker), order.price, order.amount];\n        }\n    }\n\n    function _fillOrder(uint64 buyTokenId, uint64 sellTokenId) private {\n        Order storage buy = buyTokenOrders[buyTokenId];\n        Order storage sell = sellTokenOrders[sellTokenId];\n\n        require(buy.price >= sell.price, \"buy price must be >= sell price\");\n\n        // pick maker's price (whoever placed order sooner considered as maker)\n        uint32 price = buyTokenId > sellTokenId ? sell.price : buy.price;\n\n        uint publishedRate;\n        (publishedRate, ) = rates.rates(augmintToken.peggedSymbol());\n        uint fillRate = publishedRate.mul(price).roundedDiv(1000000);\n\n        uint sellWei = sell.amount.mul(1 ether).roundedDiv(fillRate);\n\n        uint tradedWei;\n        uint tradedTokens;\n        if (sellWei <= buy.amount) {\n            tradedWei = sellWei;\n            tradedTokens = sell.amount;\n        } else {\n            tradedWei = buy.amount;\n            tradedTokens = buy.amount.mul(fillRate).roundedDiv(1 ether);\n        }\n\n        buy.amount = buy.amount.sub(tradedWei);\n        if (buy.amount == 0) {\n            _removeBuyOrder(buy);\n        }\n\n        sell.amount = sell.amount.sub(tradedTokens);\n        if (sell.amount == 0) {\n            _removeSellOrder(sell);\n        }\n\n        augmintToken.transferWithNarrative(buy.maker, tradedTokens, \"Buy token order fill\");\n        sell.maker.transfer(tradedWei);\n\n        emit OrderFill(buy.maker, sell.maker, buyTokenId,\n            sellTokenId, publishedRate, price, fillRate, tradedWei, tradedTokens);\n    }\n\n    function _placeSellTokenOrder(address maker, uint32 price, uint tokenAmount)\n    private returns (uint64 orderId) {\n        require(price > 0, \"price must be > 0\");\n        require(tokenAmount > 0, \"tokenAmount must be > 0\");\n\n        orderId = ++orderCount;\n        sellTokenOrders[orderId] = Order(uint64(activeSellOrders.length), maker, price, tokenAmount);\n        activeSellOrders.push(orderId);\n\n        emit NewOrder(orderId, maker, price, tokenAmount, 0);\n    }\n\n    function _removeBuyOrder(Order storage order) private {\n        _removeOrder(activeBuyOrders, order.index);\n    }\n\n    function _removeSellOrder(Order storage order) private {\n        _removeOrder(activeSellOrders, order.index);\n    }\n\n    function _removeOrder(uint64[] storage orders, uint64 index) private {\n        if (index < orders.length - 1) {\n            orders[index] = orders[orders.length - 1];\n        }\n        orders.length--;\n    }\n\n}\n"
        }
      }
    }
  }
}
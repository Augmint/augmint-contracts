{
  "contractName": "SafeMath",
  "latestAbiHash": "d751713988987e9331980363e24189ce",
  "d751713988987e9331980363e24189ce": {
    "latestDeployedAddress": "0xd3ef19679c2dbbf3b8e2077c61b88f5e9c6178eb",
    "deployments": {
      "0xd3ef19679c2dbbf3b8e2077c61b88f5e9c6178eb": {
        "generatedAt": "2018-04-24T18:57:53.345Z",
        "truffleContractFileUpdatedAt": "2018-02-14T23:31:03.068Z",
        "compiler": {
          "name": "solc",
          "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
        },
        "bytecodeHash": "f9302c2a25cd095142e68aae6ff44cd5",
        "deployedBytecodeHash": "e2996d9682fd6b73836fbcf2be0c44bd",
        "sourceHash": "494c9e0684ae0df336dbb0f1daa07b27",
        "source": "/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n\n    TODO: check against ds-math: https://blog.dapphub.com/ds-math/\n    TODO: move roundedDiv to a sep lib? (eg. Math.sol)\n*/\npragma solidity 0.4.19;\n\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // require(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    function roundedDiv(uint a, uint b) internal pure returns (uint256) {\n        // require(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 z = a / b;\n        if (a % b >= b / 2) {\n            z++;  // no need for safe add b/c it can happen only if we divided the input\n        }\n        return z;\n    }\n}\n"
      }
    }
  }
}
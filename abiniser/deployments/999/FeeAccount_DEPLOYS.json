{
  "contractName": "FeeAccount",
  "latestAbiHash": "dd4594a936e439aa46ed5b06cb69eafa",
  "deployedAbis": {
    "3bf67cdfa9f7a16596598e19aeb06b39": {
      "latestDeployedAddress": "0xf5efcaa78f5656f7ddc971bc5d51a08b5f161573",
      "deployments": {
        "0xf5efcaa78f5656f7ddc971bc5d51a08b5f161573": {
          "generatedAt": "2018-04-25T12:30:49.084Z",
          "truffleContractFileUpdatedAt": "2018-02-27T07:23:57.497Z",
          "compiler": {
            "name": "solc",
            "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
          },
          "bytecodeHash": "590b35b115c16a5eeb45e74226771380",
          "deployedBytecodeHash": "1d79d9ce02c401f7a91c98ab2d54b5e5",
          "sourceHash": "683f4469ac7396c5de93d4ce60e32c47",
          "source": "/* Contract to collect fees from system */\n\npragma solidity 0.4.19;\nimport \"./generic/SystemAccount.sol\";\n\n\ncontract FeeAccount is SystemAccount { // solhint-disable-line no-empty-blocks\n\n}\n"
        }
      }
    },
    "dd4594a936e439aa46ed5b06cb69eafa": {
      "latestDeployedAddress": "0xbed57eb0b4232da0cddd3c9c27490fc0759e0a01",
      "deployments": {
        "0xb0a2a8e846b66c7384f52635cecef5280f766c8b": {
          "generatedAt": "2018-04-26T01:54:21.110Z",
          "truffleContractFileUpdatedAt": "2018-04-26T01:54:11.449Z",
          "deployTransactionHash": "0xd8793495a7a15adaa17d87e69ca6ed20f64f8439524bef4101a9552df2dbef28",
          "compiler": {
            "name": "solc",
            "version": "0.4.23+commit.124ca40d.Emscripten.clang"
          },
          "bytecodeHash": "ea1ca3863b740d0cebc130bd99919069",
          "deployedBytecodeHash": "d64b9e9eed98c75afb9cbf0d9a709fd5",
          "sourceHash": "fe888fa25a5c364abea5c0856f1ebd5b",
          "source": "/* Contract to collect fees from system\n    TODO: calculateExchangeFee + Exchange params and setters\n*/\n\npragma solidity ^0.4.23;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/SystemAccount.sol\";\nimport \"./interfaces/TransferFeeInterface.sol\";\n\n\ncontract FeeAccount is SystemAccount, TransferFeeInterface {\n\n    using SafeMath for uint256;\n\n    struct TransferFee {\n        uint pt;  // in parts per million (ppm) , ie. 2,000 = 0.2%\n        uint min; // with base unit of augmint token, eg. 2 decimals for token, eg. 310 = 3.1 ACE\n        uint max; // with base unit of augmint token, eg. 2 decimals for token, eg. 310 = 3.1 ACE\n    }\n\n    TransferFee public transferFee;\n\n    event TransferFeesChanged(uint transferFeePt, uint transferFeeMin, uint transferFeeMax);\n\n    constructor(uint transferFeePt, uint transferFeeMin, uint transferFeeMax) public {\n        transferFee = TransferFee(transferFeePt, transferFeeMin, transferFeeMax);\n    }\n\n    function () public payable { // solhint-disable-line no-empty-blocks\n        // to accept ETH sent into feeAccount (defaulting fee in ETH )\n    }\n\n    function setTransferFees(uint transferFeePt, uint transferFeeMin, uint transferFeeMax)\n    external restrict(\"MonetaryBoard\") {\n        transferFee = TransferFee(transferFeePt, transferFeeMin, transferFeeMax);\n        emit TransferFeesChanged(transferFeePt, transferFeeMin, transferFeeMax);\n    }\n\n    function calculateTransferFee(address from, address to, uint amount) external view returns (uint256 fee) {\n        if (!permissions[from][\"NoFeeTransferContracts\"] && !permissions[to][\"NoFeeTransferContracts\"]) {\n            fee = amount.mul(transferFee.pt).div(1000000);\n            if (fee > transferFee.max) {\n                fee = transferFee.max;\n            } else if (fee < transferFee.min) {\n                fee = transferFee.min;\n            }\n        }\n        return fee;\n    }\n\n    function calculateExchangeFee(uint weiAmount) external view returns (uint256 weiFee) {\n        /* TODO: to be implemented and use in Exchange.sol. always revert for now */\n        require(weiAmount != weiAmount, \"not yet implemented\");\n        weiFee = transferFee.max; // to silence compiler warnings until it's implemented\n    }\n\n}\n"
        },
        "0xbed57eb0b4232da0cddd3c9c27490fc0759e0a01": {
          "generatedAt": "2018-05-09T12:19:24.863Z",
          "truffleContractFileUpdatedAt": "2018-05-09T12:19:17.182Z",
          "deployTransactionHash": "0x7b0979e47c736474f40783c225a9dacd926d2f452725274493d5c7b122a6024d",
          "compiler": {
            "name": "solc",
            "version": "0.4.23+commit.124ca40d.Emscripten.clang"
          },
          "bytecodeHash": "1aee8ce6c1ed891053a114cc53e90661",
          "deployedBytecodeHash": "9449685df0e18e918086c1eb18a3cb90",
          "sourceHash": "fe888fa25a5c364abea5c0856f1ebd5b",
          "source": "/* Contract to collect fees from system\n    TODO: calculateExchangeFee + Exchange params and setters\n*/\n\npragma solidity ^0.4.23;\nimport \"./generic/SafeMath.sol\";\nimport \"./generic/SystemAccount.sol\";\nimport \"./interfaces/TransferFeeInterface.sol\";\n\n\ncontract FeeAccount is SystemAccount, TransferFeeInterface {\n\n    using SafeMath for uint256;\n\n    struct TransferFee {\n        uint pt;  // in parts per million (ppm) , ie. 2,000 = 0.2%\n        uint min; // with base unit of augmint token, eg. 2 decimals for token, eg. 310 = 3.1 ACE\n        uint max; // with base unit of augmint token, eg. 2 decimals for token, eg. 310 = 3.1 ACE\n    }\n\n    TransferFee public transferFee;\n\n    event TransferFeesChanged(uint transferFeePt, uint transferFeeMin, uint transferFeeMax);\n\n    constructor(uint transferFeePt, uint transferFeeMin, uint transferFeeMax) public {\n        transferFee = TransferFee(transferFeePt, transferFeeMin, transferFeeMax);\n    }\n\n    function () public payable { // solhint-disable-line no-empty-blocks\n        // to accept ETH sent into feeAccount (defaulting fee in ETH )\n    }\n\n    function setTransferFees(uint transferFeePt, uint transferFeeMin, uint transferFeeMax)\n    external restrict(\"MonetaryBoard\") {\n        transferFee = TransferFee(transferFeePt, transferFeeMin, transferFeeMax);\n        emit TransferFeesChanged(transferFeePt, transferFeeMin, transferFeeMax);\n    }\n\n    function calculateTransferFee(address from, address to, uint amount) external view returns (uint256 fee) {\n        if (!permissions[from][\"NoFeeTransferContracts\"] && !permissions[to][\"NoFeeTransferContracts\"]) {\n            fee = amount.mul(transferFee.pt).div(1000000);\n            if (fee > transferFee.max) {\n                fee = transferFee.max;\n            } else if (fee < transferFee.min) {\n                fee = transferFee.min;\n            }\n        }\n        return fee;\n    }\n\n    function calculateExchangeFee(uint weiAmount) external view returns (uint256 weiFee) {\n        /* TODO: to be implemented and use in Exchange.sol. always revert for now */\n        require(weiAmount != weiAmount, \"not yet implemented\");\n        weiFee = transferFee.max; // to silence compiler warnings until it's implemented\n    }\n\n}\n"
        }
      }
    }
  }
}
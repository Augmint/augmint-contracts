{
  "contractName": "LoanManager",
  "abiHash": "dd8d5ec97e0a22b6f9e63b04d4e11e09",
  "networks": {
    "4": {
      "latest": {
        "address": "0xfb505462633ae3234760d0ee51c557199ab249df",
        "generatedAt": "2018-04-23T20:17:34.357Z",
        "compiler": {
          "name": "solc",
          "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
        },
        "byteCodeHash": "aa67baec70431e71c2be8d412df7f2d8",
        "sourceHash": "759bfe882bcce74bc3b207640322e232",
        "source": "/*\n    Contract to manage Augmint token loan contracts backed by ETH\n    For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/loanFlow.png\n\n    TODO:\n        - interestEarnedAccount setter?\n        - create MonetarySupervisor interface and use it instead?\n        - make data arg generic bytes?\n        - create and use InterestEarnedAccount interface instead?\n        - make collect() run as long as gas provided allows\n*/\npragma solidity 0.4.19;\n\nimport \"./Rates.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./generic/SafeMath.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./MonetarySupervisor.sol\";\n\n\ncontract LoanManager is Restricted {\n    using SafeMath for uint256;\n\n    enum LoanState { Open, Repaid, Defaulted }\n\n    struct LoanProduct {\n        uint term; // 0\n        uint discountRate; // 1: discountRate in parts per million , ie. 10,000 = 1%\n        uint collateralRatio;   // 2: loan token amount / colleteral pegged ccy value\n                                // in parts per million , ie. 10,000 = 1%\n        uint minDisbursedAmount; // 3: with 4 decimals, e.g. 31000 = 3.1ACE\n        uint defaultingFeePt; // 4: % of collateral in parts per million , ie. 50,000 = 5%\n        bool isActive; // 5\n    }\n\n    struct LoanData {\n        address borrower; // 0\n        LoanState state; // 1\n        uint collateralAmount; // 2\n        uint repaymentAmount; // 3\n        uint loanAmount; // 4\n        uint interestAmount; // 5\n        uint term; // 6\n        uint disbursementDate; // 7\n        uint maturity; // 8\n        uint defaultingFeePt; // 9\n    }\n\n    LoanProduct[] public products;\n\n    LoanData[] public loans;\n    mapping(address => uint[]) public mLoans;  // owner account address =>  array of loan Ids\n\n    Rates public rates; // instance of ETH/pegged currency rate provider contract\n    AugmintTokenInterface public augmintToken; // instance of token contract\n    MonetarySupervisor public monetarySupervisor;\n    InterestEarnedAccount public interestEarnedAccount;\n\n    event NewLoan(uint productId, uint loanId, address borrower, uint collateralAmount, uint loanAmount,\n        uint repaymentAmount);\n\n    event LoanProductActiveStateChanged(uint productId, bool newState);\n\n    event LoanProductAdded(uint productId);\n\n    event LoanRepayed(uint loanId, address borrower);\n\n    event LoanCollected(uint indexed loanId, address indexed borrower, uint collectedCollateral,\n        uint releasedCollateral, uint defaultingFee);\n\n    function LoanManager(AugmintTokenInterface _augmintToken, MonetarySupervisor _monetarySupervisor, Rates _rates,\n                            InterestEarnedAccount _interestEarnedAccount)\n    public {\n        augmintToken = _augmintToken;\n        monetarySupervisor = _monetarySupervisor;\n        rates = _rates;\n        interestEarnedAccount = _interestEarnedAccount;\n    }\n\n    function addLoanProduct(uint _term, uint _discountRate, uint _collateralRatio, uint _minDisbursedAmount,\n        uint _defaultingFee, bool _isActive)\n    external restrict(\"MonetaryBoard\") returns (uint newProductId) {\n        newProductId = products.push(\n            LoanProduct(_term, _discountRate, _collateralRatio, _minDisbursedAmount, _defaultingFee, _isActive)\n        ) - 1;\n\n        LoanProductAdded(newProductId);\n        return newProductId;\n    }\n\n    function setLoanProductActiveState(uint8 productId, bool newState)\n    external restrict (\"MonetaryBoard\") {\n        products[productId].isActive = false;\n        LoanProductActiveStateChanged(productId, newState);\n    }\n\n    function newEthBackedLoan(uint8 productId) external payable {\n        require(products[productId].isActive); // valid productId?\n\n        // calculate loan values based on ETH sent in with Tx\n        uint tokenValue = rates.convertFromWei(augmintToken.peggedSymbol(), msg.value);\n        uint repaymentAmount = tokenValue.mul(products[productId].collateralRatio).roundedDiv(100000000);\n        repaymentAmount = repaymentAmount * 100;    // rounding 4 decimals value to 2 decimals.\n                                                    // no safe mul needed b/c of prev divide\n\n        uint mul = products[productId].collateralRatio.mul(products[productId].discountRate) / 1000000;\n        uint loanAmount = tokenValue.mul(mul).roundedDiv(100000000);\n        loanAmount = loanAmount * 100;  // rounding 4 decimals value to 2 decimals.\n                                        // no safe mul needed b/c of prev divide\n\n        require(loanAmount >= products[productId].minDisbursedAmount);\n        uint interestAmount = loanAmount > repaymentAmount ? 0 : repaymentAmount.sub(loanAmount);\n\n        // Create new loan\n        uint loanId = loans.push(\n            LoanData(msg.sender, LoanState.Open, msg.value, repaymentAmount, loanAmount,\n                interestAmount, products[productId].term, now, now + products[productId].term,\n                products[productId].defaultingFeePt)\n            ) - 1;\n\n        // Store ref to new loan\n        mLoans[msg.sender].push(loanId);\n\n        // Issue tokens and send to borrower\n        monetarySupervisor.issueLoan(msg.sender, loanAmount);\n\n        NewLoan(productId, loanId, msg.sender, msg.value, loanAmount, repaymentAmount);\n    }\n\n    function collect(uint[] loanIds) external {\n        /* when there are a lots of loans to be collected then\n             the client need to call it in batches to make sure tx won't exceed block gas limit.\n         Anyone can call it - can't cause harm as it only allows to collect loans which they are defaulted\n         TODO: optimise defaulting fee calculations\n        */\n        uint totalLoanAmountCollected;\n        uint totalCollateralToCollect;\n        for (uint i = 0; i < loanIds.length; i++) {\n            uint loanId = loanIds[i];\n            require(loans[loanId].state == LoanState.Open);\n            require(now >= loans[loanId].maturity);\n\n            totalLoanAmountCollected = totalLoanAmountCollected.add(loans[loanId].loanAmount);\n\n            loans[loanId].state = LoanState.Defaulted;\n\n            // send ETH collateral to augmintToken reserve\n            uint defaultingFeeInToken = loans[loanId].repaymentAmount.mul(loans[loanId].defaultingFeePt).div(1000000);\n            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);\n            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(), loans[loanId].repaymentAmount)\n                .add(defaultingFee);\n            uint releasedCollateral;\n            if (targetCollection < loans[loanId].collateralAmount) {\n                releasedCollateral = loans[loanId].collateralAmount.sub(targetCollection);\n                loans[loanId].borrower.transfer(releasedCollateral);\n            }\n            uint collateralToCollect = loans[loanId].collateralAmount.sub(releasedCollateral);\n            if (defaultingFee > collateralToCollect) {\n                defaultingFee = collateralToCollect;\n            }\n\n            totalCollateralToCollect = totalCollateralToCollect.add(collateralToCollect);\n\n            LoanCollected(loanId, loans[loanId].borrower, collateralToCollect, releasedCollateral, defaultingFee);\n        }\n\n        if (totalCollateralToCollect > 0) {\n            monetarySupervisor.augmintReserves().transfer(totalCollateralToCollect);\n        }\n\n        monetarySupervisor.loanCollectionNotification(totalLoanAmountCollected);// update KPIs\n\n    }\n\n    function getLoanCount() external view returns (uint ct) {\n        return loans.length;\n    }\n\n    function getProductCount() external view returns (uint ct) {\n        return products.length;\n    }\n\n    function getLoanIds(address borrower) external view returns (uint[] _loans) {\n        return mLoans[borrower];\n    }\n\n    /* repay loan, called from AugmintToken's transferAndNotify\n     Flow for repaying loan:\n        1) user calls token contract's transferAndNotify loanId passed in data arg\n        2) transferAndNotify transfers tokens to the Lender contract\n        3) transferAndNotify calls Lender.transferNotification with lockProductId\n    */\n    // from arg is not used as we allow anyone to repay a loan:\n    function transferNotification(address, uint repaymentAmount, uint loanId) public {\n        require(msg.sender == address(augmintToken));\n        _repayLoan(loanId, repaymentAmount);\n    }\n\n    /* internal function, assuming repayment amount already transfered  */\n    function _repayLoan(uint loanId, uint repaymentAmount) internal {\n        require(loans[loanId].state == LoanState.Open);\n        require(now <= loans[loanId].maturity);\n        require(loans[loanId].repaymentAmount == repaymentAmount);\n        loans[loanId].state = LoanState.Repaid;\n\n        augmintToken.transfer(interestEarnedAccount, loans[loanId].interestAmount);\n\n        augmintToken.burn(loans[loanId].loanAmount);\n        monetarySupervisor.loanRepaymentNotification(loans[loanId].loanAmount); // update KPIs\n\n        loans[loanId].borrower.transfer(loans[loanId].collateralAmount); // send back ETH collateral\n\n        LoanRepayed(loanId, loans[loanId].borrower);\n    }\n\n}\n"
      }
    },
    "999": {
      "latest": {
        "address": "0x72ab340874d8189778d5b4def3eaabc9069da7f2",
        "generatedAt": "2018-04-23T20:17:34.357Z",
        "compiler": {
          "name": "solc",
          "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
        },
        "byteCodeHash": "aa67baec70431e71c2be8d412df7f2d8",
        "sourceHash": "759bfe882bcce74bc3b207640322e232",
        "source": "/*\n    Contract to manage Augmint token loan contracts backed by ETH\n    For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/loanFlow.png\n\n    TODO:\n        - interestEarnedAccount setter?\n        - create MonetarySupervisor interface and use it instead?\n        - make data arg generic bytes?\n        - create and use InterestEarnedAccount interface instead?\n        - make collect() run as long as gas provided allows\n*/\npragma solidity 0.4.19;\n\nimport \"./Rates.sol\";\nimport \"./generic/Restricted.sol\";\nimport \"./generic/SafeMath.sol\";\nimport \"./interfaces/AugmintTokenInterface.sol\";\nimport \"./InterestEarnedAccount.sol\";\nimport \"./MonetarySupervisor.sol\";\n\n\ncontract LoanManager is Restricted {\n    using SafeMath for uint256;\n\n    enum LoanState { Open, Repaid, Defaulted }\n\n    struct LoanProduct {\n        uint term; // 0\n        uint discountRate; // 1: discountRate in parts per million , ie. 10,000 = 1%\n        uint collateralRatio;   // 2: loan token amount / colleteral pegged ccy value\n                                // in parts per million , ie. 10,000 = 1%\n        uint minDisbursedAmount; // 3: with 4 decimals, e.g. 31000 = 3.1ACE\n        uint defaultingFeePt; // 4: % of collateral in parts per million , ie. 50,000 = 5%\n        bool isActive; // 5\n    }\n\n    struct LoanData {\n        address borrower; // 0\n        LoanState state; // 1\n        uint collateralAmount; // 2\n        uint repaymentAmount; // 3\n        uint loanAmount; // 4\n        uint interestAmount; // 5\n        uint term; // 6\n        uint disbursementDate; // 7\n        uint maturity; // 8\n        uint defaultingFeePt; // 9\n    }\n\n    LoanProduct[] public products;\n\n    LoanData[] public loans;\n    mapping(address => uint[]) public mLoans;  // owner account address =>  array of loan Ids\n\n    Rates public rates; // instance of ETH/pegged currency rate provider contract\n    AugmintTokenInterface public augmintToken; // instance of token contract\n    MonetarySupervisor public monetarySupervisor;\n    InterestEarnedAccount public interestEarnedAccount;\n\n    event NewLoan(uint productId, uint loanId, address borrower, uint collateralAmount, uint loanAmount,\n        uint repaymentAmount);\n\n    event LoanProductActiveStateChanged(uint productId, bool newState);\n\n    event LoanProductAdded(uint productId);\n\n    event LoanRepayed(uint loanId, address borrower);\n\n    event LoanCollected(uint indexed loanId, address indexed borrower, uint collectedCollateral,\n        uint releasedCollateral, uint defaultingFee);\n\n    function LoanManager(AugmintTokenInterface _augmintToken, MonetarySupervisor _monetarySupervisor, Rates _rates,\n                            InterestEarnedAccount _interestEarnedAccount)\n    public {\n        augmintToken = _augmintToken;\n        monetarySupervisor = _monetarySupervisor;\n        rates = _rates;\n        interestEarnedAccount = _interestEarnedAccount;\n    }\n\n    function addLoanProduct(uint _term, uint _discountRate, uint _collateralRatio, uint _minDisbursedAmount,\n        uint _defaultingFee, bool _isActive)\n    external restrict(\"MonetaryBoard\") returns (uint newProductId) {\n        newProductId = products.push(\n            LoanProduct(_term, _discountRate, _collateralRatio, _minDisbursedAmount, _defaultingFee, _isActive)\n        ) - 1;\n\n        LoanProductAdded(newProductId);\n        return newProductId;\n    }\n\n    function setLoanProductActiveState(uint8 productId, bool newState)\n    external restrict (\"MonetaryBoard\") {\n        products[productId].isActive = false;\n        LoanProductActiveStateChanged(productId, newState);\n    }\n\n    function newEthBackedLoan(uint8 productId) external payable {\n        require(products[productId].isActive); // valid productId?\n\n        // calculate loan values based on ETH sent in with Tx\n        uint tokenValue = rates.convertFromWei(augmintToken.peggedSymbol(), msg.value);\n        uint repaymentAmount = tokenValue.mul(products[productId].collateralRatio).roundedDiv(100000000);\n        repaymentAmount = repaymentAmount * 100;    // rounding 4 decimals value to 2 decimals.\n                                                    // no safe mul needed b/c of prev divide\n\n        uint mul = products[productId].collateralRatio.mul(products[productId].discountRate) / 1000000;\n        uint loanAmount = tokenValue.mul(mul).roundedDiv(100000000);\n        loanAmount = loanAmount * 100;  // rounding 4 decimals value to 2 decimals.\n                                        // no safe mul needed b/c of prev divide\n\n        require(loanAmount >= products[productId].minDisbursedAmount);\n        uint interestAmount = loanAmount > repaymentAmount ? 0 : repaymentAmount.sub(loanAmount);\n\n        // Create new loan\n        uint loanId = loans.push(\n            LoanData(msg.sender, LoanState.Open, msg.value, repaymentAmount, loanAmount,\n                interestAmount, products[productId].term, now, now + products[productId].term,\n                products[productId].defaultingFeePt)\n            ) - 1;\n\n        // Store ref to new loan\n        mLoans[msg.sender].push(loanId);\n\n        // Issue tokens and send to borrower\n        monetarySupervisor.issueLoan(msg.sender, loanAmount);\n\n        NewLoan(productId, loanId, msg.sender, msg.value, loanAmount, repaymentAmount);\n    }\n\n    function collect(uint[] loanIds) external {\n        /* when there are a lots of loans to be collected then\n             the client need to call it in batches to make sure tx won't exceed block gas limit.\n         Anyone can call it - can't cause harm as it only allows to collect loans which they are defaulted\n         TODO: optimise defaulting fee calculations\n        */\n        uint totalLoanAmountCollected;\n        uint totalCollateralToCollect;\n        for (uint i = 0; i < loanIds.length; i++) {\n            uint loanId = loanIds[i];\n            require(loans[loanId].state == LoanState.Open);\n            require(now >= loans[loanId].maturity);\n\n            totalLoanAmountCollected = totalLoanAmountCollected.add(loans[loanId].loanAmount);\n\n            loans[loanId].state = LoanState.Defaulted;\n\n            // send ETH collateral to augmintToken reserve\n            uint defaultingFeeInToken = loans[loanId].repaymentAmount.mul(loans[loanId].defaultingFeePt).div(1000000);\n            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);\n            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(), loans[loanId].repaymentAmount)\n                .add(defaultingFee);\n            uint releasedCollateral;\n            if (targetCollection < loans[loanId].collateralAmount) {\n                releasedCollateral = loans[loanId].collateralAmount.sub(targetCollection);\n                loans[loanId].borrower.transfer(releasedCollateral);\n            }\n            uint collateralToCollect = loans[loanId].collateralAmount.sub(releasedCollateral);\n            if (defaultingFee > collateralToCollect) {\n                defaultingFee = collateralToCollect;\n            }\n\n            totalCollateralToCollect = totalCollateralToCollect.add(collateralToCollect);\n\n            LoanCollected(loanId, loans[loanId].borrower, collateralToCollect, releasedCollateral, defaultingFee);\n        }\n\n        if (totalCollateralToCollect > 0) {\n            monetarySupervisor.augmintReserves().transfer(totalCollateralToCollect);\n        }\n\n        monetarySupervisor.loanCollectionNotification(totalLoanAmountCollected);// update KPIs\n\n    }\n\n    function getLoanCount() external view returns (uint ct) {\n        return loans.length;\n    }\n\n    function getProductCount() external view returns (uint ct) {\n        return products.length;\n    }\n\n    function getLoanIds(address borrower) external view returns (uint[] _loans) {\n        return mLoans[borrower];\n    }\n\n    /* repay loan, called from AugmintToken's transferAndNotify\n     Flow for repaying loan:\n        1) user calls token contract's transferAndNotify loanId passed in data arg\n        2) transferAndNotify transfers tokens to the Lender contract\n        3) transferAndNotify calls Lender.transferNotification with lockProductId\n    */\n    // from arg is not used as we allow anyone to repay a loan:\n    function transferNotification(address, uint repaymentAmount, uint loanId) public {\n        require(msg.sender == address(augmintToken));\n        _repayLoan(loanId, repaymentAmount);\n    }\n\n    /* internal function, assuming repayment amount already transfered  */\n    function _repayLoan(uint loanId, uint repaymentAmount) internal {\n        require(loans[loanId].state == LoanState.Open);\n        require(now <= loans[loanId].maturity);\n        require(loans[loanId].repaymentAmount == repaymentAmount);\n        loans[loanId].state = LoanState.Repaid;\n\n        augmintToken.transfer(interestEarnedAccount, loans[loanId].interestAmount);\n\n        augmintToken.burn(loans[loanId].loanAmount);\n        monetarySupervisor.loanRepaymentNotification(loans[loanId].loanAmount); // update KPIs\n\n        loans[loanId].borrower.transfer(loans[loanId].collateralAmount); // send back ETH collateral\n\n        LoanRepayed(loanId, loans[loanId].borrower);\n    }\n\n}\n"
      }
    }
  }
}
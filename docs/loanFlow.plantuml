@startuml
title **Augmint** - Loan flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey

actor Borrower
control AugmintToken
control MonetarySupervisor
control Lender
actor Collector

== New loan ==
Borrower -> Lender : newEthBackedLoan(productId, {value: ethToEscrow})\n//ETH collateral sent in to Lender//

activate Lender
    Lender -> Lender : calculate loanAmount from colllateral sent\ncreate new loan
    Lender -> MonetarySupervisor : issueAndDisburse\n(borrower, loanAmount, interestAmount, narrative)
deactivate Lender

activate MonetarySupervisor
    note over MonetarySupervisor
        issueAndDisburse is restricted to
        trusted Lender contract(s)
    end note
    MonetarySupervisor -> MonetarySupervisor : enforce limits + update KPIs
    MonetarySupervisor -> AugmintToken : issueTo(borrower, loanAmount, narrative)
deactivate MonetarySupervisor

activate AugmintToken
    note over AugmintToken
        issueTo is restricted to
        MonetarySupervisor contract
    end note
    AugmintToken -> AugmintToken : _issue(to: msg.sender, loanAmount)\n//internal function//
    AugmintToken -> AugmintToken : _transfer(from: msg.sender, to: Borrower, loanAmount, narrative, fee: 0)\n//internal function//
    AugmintToken --> Borrower : loanAmount transferred
    AugmintToken -> MonetarySupervisor : success (isssueTo)
deactivate AugmintToken

MonetarySupervisor -> Lender : success (issueAndDisburse)

Lender -> Lender : emmit events


== Repay loan  ==
Borrower -> AugmintToken : transferAndCall\n(address: Lender, value: repaymentAmount, data: loanId)
AugmintToken -> Lender : tokenFallback\n(sender: AugmintToken, origin: borrower, repaymentAmount, data: loanId)

activate Lender
    note over Lender
        tokenFallback reverts (sends back tokens) if
        sender is not trusted AugmintToken
    end note
    Lender -> Lender : loan checks + set loan status
    Lender -> MonetarySupervisor : repayAndBurn\n(borrower, repaymentAmount, interestAmount, narrative)
    note over MonetarySupervisor
        repayAndBurn is restricted to
        trusted Lender contract(s)
    end note
deactivate Lender

activate MonetarySupervisor
    MonetarySupervisor -> MonetarySupervisor : update KPIs
    MonetarySupervisor -> AugmintToken : burnFrom(borrower, loanAmount, interestAmount narrative)
deactivate MonetarySupervisor

activate AugmintToken
    note over AugmintToken #yellow
        burnFrom is restricted to
        MonetarySupervisor contract
        Q: interestAmount is required (see below).
        Could we avoid it to make burnFrom more generic?
    end note
    AugmintToken -> AugmintToken : _transfer(borrower, Lender, repaymentAmount, narrative)
    Borrower --> Lender : repaymentAmount transferred
    AugmintToken -> AugmintToken : _transfer\n(AugmintToken, interestEarnedAcc, interestAmount, "interest earned", fee: 0)
    note over AugmintToken #yellow
        it is in internal transfer, we don't really need transfer events & narratives
        Shall we just do balances[] update instead?
    end note
    AugmintToken -> AugmintToken : _burnFrom(Lender, loanAmount)
    AugmintToken -> MonetarySupervisor : success (burnFrom)
deactivate AugmintToken

MonetarySupervisor -> Lender : success (repayAndBurn)

activate Lender
Lender -> Borrower : borrower.send(collateral)
Lender -> Lender : emmit events
deactivate Lender

== Collect loan  ==
Collector -> Lender : collectMultipleLoans(loanIds[])
note left
    collectMultiple() is not restricted
    caller will be rewarded with eth
end note
activate Lender

loop as many times as fits to gas provided to tx call
    Lender -> Lender : _collect()\n//collect is internal fx//
    Lender --> AugmintToken : AugmintToken.send({loanValueInEth + defaultingFee - collectionReward})
    Lender --> Borrower : Borrower.send({collaterInEscrow - loanValueInEth - defaultingFee})
end
Lender --> Collector : Collector.send(sum of collectionRewards )

deactivate Lender
@enduml

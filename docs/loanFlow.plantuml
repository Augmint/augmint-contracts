@startuml
title **Augmint** - Loan flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey

actor Borrower
control AugmintToken
control MonetarySupervisor
control Lender
actor Collector

== New loan ==
Borrower -> Lender : newEthBackedLoan(productId, {value: ethToEscrow})\n//ETH collateral sent in to Lender//

activate Lender
    Lender -> Lender : calculate loanAmount from colllateral sent\ncreate new loan
    Lender -> MonetarySupervisor : issueForLoan\n(borrower, loanAmount, interestAmount, narrative)
deactivate Lender

activate MonetarySupervisor
    note over MonetarySupervisor
        issueForLoan is restricted to
        trusted Lender contract(s)
    end note
    MonetarySupervisor -> MonetarySupervisor : enforce limits + update KPIs
    MonetarySupervisor -> AugmintToken : issueTo(Borrower, loanAmount)
deactivate MonetarySupervisor

activate AugmintToken
    note over AugmintToken
        issueTo is restricted to
        MonetarySupervisor contract
    end note
    AugmintToken -> AugmintToken : _issue(to: Borrower, loanAmount)\n//internal function//
    AugmintToken --> Borrower : loanAmount issued to Borrower
    AugmintToken -> MonetarySupervisor : success (isssueTo)
deactivate AugmintToken

MonetarySupervisor -> Lender : success (issueForLoan)

Lender -> Lender : emmit events

== Repay loan  ==
Borrower -> AugmintToken : transferAndNotify\n(address: Lender, value: repaymentAmount, data: loanId)

activate AugmintToken
    AugmintToken -> AugmintToken : _transfer(borrower, Lender, repaymentAmount, "")
    Borrower --> Lender : repaymentAmount transferred
    AugmintToken -> Lender : transferNotification\n(sender: AugmintToken, origin: borrower, repaymentAmount, data: loanId)
deactivate AugmintToken

activate Lender
    Lender -> Lender : checks + set loan status
    Lender -> AugmintToken : transfer(interestEarnedAcc, interestAmount)
    Lender -> MonetarySupervisor : burnLoanRepayment\n(repaymentAmount, interestAmount)
    note over MonetarySupervisor
        burnLoanRepayment is restricted to
        trusted Lender contract(s)
    end note
deactivate Lender

activate MonetarySupervisor
    MonetarySupervisor -> MonetarySupervisor : update KPIs
    MonetarySupervisor -> AugmintToken : burnFrom(Lender, loanAmount)
    note over AugmintToken
        burnFrom is restricted to
        MonetarySupervisor contract
    end note
deactivate MonetarySupervisor

activate AugmintToken
    AugmintToken -> AugmintToken : _burnFrom(Lender, loanAmount)
    AugmintToken -> MonetarySupervisor : success (burnFrom)
deactivate AugmintToken

MonetarySupervisor -> Lender : success (burnLoanRepayment)

activate Lender
Lender -> Borrower : borrower.send(collateral)
Lender -> Lender : emmit events
deactivate Lender

== Collect loan  ==
Collector -> Lender : collectMultipleLoans(loanIds[])
note left
    collectMultiple() is not restricted
    caller will be rewarded with eth
end note
activate Lender

loop as many times as fits to gas provided to tx call
    Lender -> Lender : _collect()\n//collect is internal fx//
    Lender --> AugmintToken : AugmintToken.send({loanValueInEth + defaultingFee - collectionReward})
    Lender --> Borrower : Borrower.send({collaterInEscrow - loanValueInEth - defaultingFee})
end
Lender --> Collector : Collector.send(sum of collectionRewards )

deactivate Lender
@enduml

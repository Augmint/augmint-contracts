@startuml
title **Augmint** - Exchange flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey
actor Seller
control AugmintToken
control ExchangeContract
actor Buyer
actor MatchCaller

== Token sell Token order ALT 1. - using transferAndNotify, requires one TX only from seller ==
Seller -> AugmintToken : transferAndNotify\n(address: exchangeAddress, tokenAmount, data: price)
AugmintToken -> AugmintToken : _transfer\n(from: Seller, to: ExchangeContract, amount, narrative: "")
Seller --> ExchangeContract : tokens to sell transfered
AugmintToken -> ExchangeContract : transferNotification\n(sender: augmintToken, origin: Seller, amount, data: price)
note over ExchangeContract
    transferNotification is
    restricted to AugmintToken
end note
ExchangeContract -> ExchangeContract : check & save order

== Token Buy Order  ==
Buyer -> ExchangeContract : placeBuyOrder\n(price, {ethAMount})
ExchangeContract -> ExchangeContract : check & save order

== Take Sell Order (taking order in one go) ==
Buyer -> ExchangeContract : takeSellOrder(orderId, {ethAMount});
ExchangeContract -> ExchangeContract : fill/partially fill order
ExchangeContract -> Seller : Seller.send( ethValue - tradeFee )
ExchangeContract -> AugmintToken : transfer\n(to: Buyer, amountSold)
ExchangeContract --> Buyer : amountSold transferred

== Take Buy Order Alt 1. - using transferAndNotify, requires one TX only ==
Seller -> AugmintToken : transferAndNotify\n(address: exchangeAddress, tokenAmount, data: orderId)
AugmintToken -> AugmintToken : _transfer\n(from: Seller, to: ExchangeContract, amount, narrative: "")
Seller --> ExchangeContract : tokens to sell transfered
AugmintToken -> ExchangeContract : transferNotification\n(sender: augmintToken, origin: Seller, amount, data: orderId)
ExchangeContract -> ExchangeContract : fill/partially fill order
ExchangeContract -> Seller : Seller.send( ethValue - tradeFee )
ExchangeContract -> AugmintToken : transfer\n(to: Buyer, amountSold)
ExchangeContract --> Buyer : amountSold transferred

== Order matching  ==
Buyer -> ExchangeContract : matchMultiple(matchPairs[])\n//sell and buy orderId pairs passed
note left
    matchMultiple() is not restricted
    Caller can be any 3rd party and will be rewarded with ETH
end note
loop on each match, as many times as it fits to gas provided to tx call
    ExchangeContract -> ExchangeContract : fill/partially fill order
    ExchangeContract -> Seller : Seller.send( ethValue - tradeFee - matchReward )
    ExchangeContract -> AugmintToken : transfer\n(to: Buyer, amountSold)
    ExchangeContract --> Buyer : amountSold transferred
end
ExchangeContract -> ExchangeContract : feesAccount.send(sum tradeFee - sum matchReward)\n//fees in ETH//
ExchangeContract -> MatchCaller : send(MatchCaller, sum matchReward)

== cancel buy order  ==
Buyer -> ExchangeContract : cancelBuyOrder\n(orderId)
ExchangeContract -> ExchangeContract : remove order
ExchangeContract -> Buyer : Seller.send( unfilledEthValue)

== cancel sell order  ==
Seller -> ExchangeContract : cancelSellOrder\n(orderId)
ExchangeContract -> ExchangeContract : remove order
ExchangeContract -> AugmintToken : transfer\n(to: Buyer, amount)
note over AugmintToken
    0 transfer fee (only for whitelisted sender contracts)
end note
ExchangeContract --> Seller : unfilled amount transferred back

== Token sell order ALT 2. - works with ERC20 standard calls (requires 2 TXs from seller) ==
Seller -> AugmintToken : Tx1: approve(ExchangeContract, amount)
Seller -> ExchangeContract : Tx2: placeSellTokenOrder(amount, price)
ExchangeContract -> AugmintToken : transferFrom\n(from: msg.sender, to: ExchangeContract, amount)
Seller --> ExchangeContract : tokens to sell transfered
ExchangeContract -> ExchangeContract : save order

== Take Buy Order Alt 2. - standard ERC20 calls, requires two TXs ==
note over AugmintToken, ExchangeContract
    Will not be implemented for pilot
end note

@enduml

@startuml
title **Augmint** - Lock flow
skinparam ArrowColor #blue
skinparam noteBackgroundColor #lightgrey

actor Depositor
control AugmintToken
control Locker
control MonetarySupervisor
control InterestEarnedAccount
actor Releaser

== Locking funds ==
Depositor -> AugmintToken : transferAndNotify\n(address: Locker, value: lockAmount, data: lockProductId)

activate AugmintToken
    AugmintToken -> AugmintToken : _transfer(Depositor, Locker, lockAmount, "")
    Depositor --> Locker : lockAmount transferred
    AugmintToken -> Locker : transferNotification\n(sender: AugmintToken, origin: Depositor, lockAmount, data: lockProductId)
deactivate AugmintToken

activate Locker
    Locker -> Locker : checks & create new lock
    Locker -> MonetarySupervisor : requestInterest\n(lockAmount, interestAmount)
    note over MonetarySupervisor
        requestInterest is restricted to
        trusted Locker contract(s)
    end note
deactivate Locker

activate MonetarySupervisor
    MonetarySupervisor -> MonetarySupervisor : enforce limits + update KPIs
    MonetarySupervisor -> InterestEarnedAccount : transferInterest(Locker, interestAmount)
deactivate MonetarySupervisor

activate InterestEarnedAccount
    note over InterestEarnedAccount
        transferInterest is restricted to
        MonetarySupervisor contract
    end note
    InterestEarnedAccount -> AugmintToken : transfer(Locker, interestAmount)
    InterestEarnedAccount --> Locker : lock interest transfered
    InterestEarnedAccount -> MonetarySupervisor : success (transferInterest)
deactivate InterestEarnedAccount

MonetarySupervisor -> Locker : success (requestInterest)

activate Locker
    Locker -> Locker : emmit events
deactivate Locker

== Release funds  ==
Releaser -> Locker : releaseFunds(lockId)
note left
    releaseFunds() is not restricted
    caller will be rewarded
    (to be implemented later + releaseMultiple)
end note

activate Locker
    Locker -> Locker : checks if release time passed
    Locker -> MonetarySupervisor : releaseFundsNotification\n(lockAmount)\n//lockAmount is without interest//
deactivate Locker

activate MonetarySupervisor
    note over MonetarySupervisor
        releaseFundsNotification is restricted to
        trusted Locker contract(s)
    end note
    MonetarySupervisor -> MonetarySupervisor : update KPIs
deactivate MonetarySupervisor

MonetarySupervisor -> Locker : success (releaseFundsNotification)

activate Locker
    Locker -> AugmintToken : transferWithNarrative(Depositor, lockAmount + interestAmount, "Funds released from lock")
    Locker --> Depositor : lockAmount + interest transfered
Locker -> Locker : emmit events
deactivate Locker
@enduml
